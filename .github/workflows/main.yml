name: GitHub Actions for Frontend

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout source code
      - name: Checkout code
        uses: actions/checkout@v3  

      # Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Set up Docker cache 
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Install dependencies and run tests (security analysis)
      - name: Install Dependencies and run tests
        run: |
          npm install
          npm audit --production --json | tee audit-results.json

      # Run Snyk Security scan on dependencies
      - name: Run Snyk to check for vulnerabilities
        id: snyk_scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        with:
          args: --json-file-output=snyk-results.json

      # Process Snyk results
      - name: Process Snyk Results
        id: process_snyk
        run: |
          if [ -f "snyk-results.json" ]; then
            # Count vulnerabilities by severity
            CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.vulnerabilities[] | select(.severity == "low")] | length' snyk-results.json 2>/dev/null || echo "0")
            
            echo "SNYK_CRITICAL=$CRITICAL" >> $GITHUB_ENV
            echo "SNYK_HIGH=$HIGH" >> $GITHUB_ENV
            echo "SNYK_MEDIUM=$MEDIUM" >> $GITHUB_ENV
            echo "SNYK_LOW=$LOW" >> $GITHUB_ENV
            echo "SNYK_TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))" >> $GITHUB_ENV
            
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "SNYK_STATUS=‚ùå Found Critical/High vulnerabilities" >> $GITHUB_ENV
            elif [ $MEDIUM -gt 0 ] || [ $LOW -gt 0 ]; then
              echo "SNYK_STATUS=‚ö†Ô∏è Found Medium/Low vulnerabilities" >> $GITHUB_ENV
            else
              echo "SNYK_STATUS=‚úÖ No vulnerabilities found" >> $GITHUB_ENV
            fi
          else
            echo "SNYK_STATUS=‚ùì Scan results not available" >> $GITHUB_ENV
            echo "SNYK_TOTAL=0" >> $GITHUB_ENV
            echo "SNYK_CRITICAL=0" >> $GITHUB_ENV
            echo "SNYK_HIGH=0" >> $GITHUB_ENV
            echo "SNYK_MEDIUM=0" >> $GITHUB_ENV
            echo "SNYK_LOW=0" >> $GITHUB_ENV
          fi

      # Generate commit SHA for Docker image tag
      - name: Generate Commit SHA for Image Tag
        id: set_image_tag
        run: |
          IMAGE_TAG="${{ github.sha }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      # Build Docker image with commit SHA as tag
      - name: Build Docker image
        run: |
            IMAGE_TAG="${{ github.sha }}"
            echo "Building Docker image with tag: $IMAGE_TAG"  
            docker build -t fclone29/react-demo:$IMAGE_TAG .

      # Run Trivy Security scan on Docker image (updated version)
      - name: Scan Docker image with Trivy for vulnerabilities
        id: trivy_scan
        uses: aquasecurity/trivy-action@0.28.0 
        with:
            image-ref: fclone29/react-demo:${{ env.IMAGE_TAG }}
            format: 'json'  
            exit-code: '0'
            ignore-unfixed: false
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
            output: 'trivy-results.json'

      # Process Trivy results
      - name: Process Trivy Results
        id: process_trivy
        run: |
          if [ -f "trivy-results.json" ]; then
            # Count vulnerabilities by severity from Trivy results
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-results.json 2>/dev/null || echo "0")
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-results.json 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-results.json 2>/dev/null || echo "0")
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-results.json 2>/dev/null || echo "0")
            
            echo "TRIVY_CRITICAL=$CRITICAL" >> $GITHUB_ENV
            echo "TRIVY_HIGH=$HIGH" >> $GITHUB_ENV
            echo "TRIVY_MEDIUM=$MEDIUM" >> $GITHUB_ENV
            echo "TRIVY_LOW=$LOW" >> $GITHUB_ENV
            echo "TRIVY_TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))" >> $GITHUB_ENV
            
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "TRIVY_STATUS=‚ùå Found Critical/High vulnerabilities" >> $GITHUB_ENV
            elif [ $MEDIUM -gt 0 ] || [ $LOW -gt 0 ]; then
              echo "TRIVY_STATUS=‚ö†Ô∏è Found Medium/Low vulnerabilities" >> $GITHUB_ENV
            else
              echo "TRIVY_STATUS=‚úÖ No vulnerabilities found" >> $GITHUB_ENV
            fi
          else
            echo "TRIVY_STATUS=‚ùì Scan results not available" >> $GITHUB_ENV
            echo "TRIVY_TOTAL=0" >> $GITHUB_ENV
            echo "TRIVY_CRITICAL=0" >> $GITHUB_ENV
            echo "TRIVY_HIGH=0" >> $GITHUB_ENV
            echo "TRIVY_MEDIUM=0" >> $GITHUB_ENV
            echo "TRIVY_LOW=0" >> $GITHUB_ENV
          fi

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push Docker image to Docker Hub or GitHub Container Registry
      - name: Push Docker image to Registry
        run: |
            echo "Pushing Docker image: fclone29/react-demo:${{ env.IMAGE_TAG }}"  # Verify tag before pushing
            docker push fclone29/react-demo:${{ env.IMAGE_TAG }}

      # Notify via Slack on Success (with Security Scan Results)
      - name: Notify via Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v2.1.1 
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "Deployment successful for commit ${{ github.sha }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*üéâ Deployment Successful*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Commit SHA*: ${{ github.sha }}"
                  - type: "mrkdwn"
                    text: "*Image Tag*: ${{ env.IMAGE_TAG }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View Commit>"
              - type: "divider"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*üîç Security Scan Results*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk Dependencies*\n${{ env.SNYK_STATUS }}\nTotal: ${{ env.SNYK_TOTAL }} (Critical: ${{ env.SNYK_CRITICAL }}, High: ${{ env.SNYK_HIGH }}, Medium: ${{ env.SNYK_MEDIUM }}, Low: ${{ env.SNYK_LOW }})"
                  - type: "mrkdwn"
                    text: "*Trivy Container*\n${{ env.TRIVY_STATUS }}\nTotal: ${{ env.TRIVY_TOTAL }} (Critical: ${{ env.TRIVY_CRITICAL }}, High: ${{ env.TRIVY_HIGH }}, Medium: ${{ env.TRIVY_MEDIUM }}, Low: ${{ env.TRIVY_LOW }})"

      # Notify via Slack on Failure (with Security Scan Results)
      - name: Notify via Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v2.1.1  
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "Deployment failed for commit ${{ github.sha }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*‚ùå Deployment Failed*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Commit SHA*: ${{ github.sha }}"
                  - type: "mrkdwn"
                    text: "*Image Tag*: ${{ env.IMAGE_TAG }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View Commit>"
              - type: "divider"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*üîç Security Scan Results*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk Dependencies*\n${{ env.SNYK_STATUS }}\nTotal: ${{ env.SNYK_TOTAL }} (Critical: ${{ env.SNYK_CRITICAL }}, High: ${{ env.SNYK_HIGH }}, Medium: ${{ env.SNYK_MEDIUM }}, Low: ${{ env.SNYK_LOW }})"
                  - type: "mrkdwn"
                    text: "*Trivy Container*\n${{ env.TRIVY_STATUS }}\nTotal: ${{ env.TRIVY_TOTAL }} (Critical: ${{ env.TRIVY_CRITICAL }}, High: ${{ env.TRIVY_HIGH }}, Medium: ${{ env.TRIVY_MEDIUM }}, Low: ${{ env.TRIVY_LOW }})"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Please check the workflow logs for detailed information. üîß"

      # Send Security Alert to Slack if Critical/High vulnerabilities found
      - name: Send Security Alert to Slack
        if: always() && (env.SNYK_CRITICAL > 0 || env.SNYK_HIGH > 0 || env.TRIVY_CRITICAL > 0 || env.TRIVY_HIGH > 0)
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK }}
          webhook-type: incoming-webhook
          payload: |
            text: "üö® SECURITY ALERT: Critical/High vulnerabilities detected!"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*üö® SECURITY ALERT*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Critical or High severity vulnerabilities detected in commit ${{ github.sha }}"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Snyk (Dependencies)*\nCritical: ${{ env.SNYK_CRITICAL }}\nHigh: ${{ env.SNYK_HIGH }}"
                  - type: "mrkdwn"
                    text: "*Trivy (Container)*\nCritical: ${{ env.TRIVY_CRITICAL }}\nHigh: ${{ env.TRIVY_HIGH }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Detailed Scan Results>"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "‚ö†Ô∏è *Action Required:* Please review and address these security vulnerabilities immediately."